diff --git a/src/art/libdexfile/dex/dex_file.cc b/src/art/libdexfile/dex/dex_file.cc
index 6ebb5b8..9df8d7f 100644
--- a/src/art/libdexfile/dex/dex_file.cc
+++ b/src/art/libdexfile/dex/dex_file.cc
@@ -602,6 +602,31 @@ dex::ProtoIndex DexFile::GetProtoIndexForCallSite(uint32_t call_site_idx) const
   return dex::ProtoIndex(it.GetJavaValue().i);
 }
 
+std::ostream& operator<<(std::ostream& os, EncodedArrayValueIterator::ValueType rhs) {
+  switch (rhs) {
+    case EncodedArrayValueIterator::kByte: os << "Byte"; break;
+    case EncodedArrayValueIterator::kShort: os << "Short"; break;
+    case EncodedArrayValueIterator::kChar: os << "Char"; break;
+    case EncodedArrayValueIterator::kInt: os << "Int"; break;
+    case EncodedArrayValueIterator::kLong: os << "Long"; break;
+    case EncodedArrayValueIterator::kFloat: os << "Float"; break;
+    case EncodedArrayValueIterator::kDouble: os << "Double"; break;
+    case EncodedArrayValueIterator::kMethodType: os << "MethodType"; break;
+    case EncodedArrayValueIterator::kMethodHandle: os << "MethodHandle"; break;
+    case EncodedArrayValueIterator::kString: os << "String"; break;
+    case EncodedArrayValueIterator::kType: os << "Type"; break;
+    case EncodedArrayValueIterator::kField: os << "Field"; break;
+    case EncodedArrayValueIterator::kMethod: os << "Method"; break;
+    case EncodedArrayValueIterator::kEnum: os << "Enum"; break;
+    case EncodedArrayValueIterator::kArray: os << "Array"; break;
+    case EncodedArrayValueIterator::kAnnotation: os << "Annotation"; break;
+    case EncodedArrayValueIterator::kNull: os << "Null"; break;
+    case EncodedArrayValueIterator::kBoolean: os << "Boolean"; break;
+    default: os << "EncodedArrayValueIterator::ValueType[" << static_cast<int>(rhs) << "]"; break;
+  }
+  return os;
+}
+
 // Checks that visibility is as expected. Includes special behavior for M and
 // before to allow runtime and build visibility when expecting runtime.
 std::ostream& operator<<(std::ostream& os, const DexFile& dex_file) {
